library(ggplot2)
hist_plot <- df %>%
ggplot(aes(count)) +
geom_bar()
hist_plot
hist_plot <- df %>%
ggplot(aes(counts)) +
geom_bar()
hist_plot
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar()
hist_plot
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity")
hist_plot
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
hist_plot
df <- sample %>%
group_by(format_) %>%
summarise(counts = n())
df <- df[order(df$counts),]
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
hist_plot
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
hist_plot
df
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
hist_plot
df <- sample %>%
group_by(format_) %>%
summarise(counts = n())
df <- df[order(df$counts, decreasing = TRUE),]
df
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
hist_plot
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(dplyr)
library(ggplot2)
# Read data
raw_data <- read.csv('../discogs_20220501_releases.csv')
head(raw_data)
sample <- sample_n(raw_data, 1000)
df <- sample %>%
group_by(format_) %>%
summarise(counts = n())
df <- df[order(df$counts, decreasing = TRUE),]
df
hist_plot <- df %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
hist_plot
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
fcountry_plot <- country_counts %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
fcountry_plot
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
country_plot <- country_counts %>%
ggplot(aes(x = format_, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
country_plot
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
country_plot <- country_counts %>%
ggplot(aes(x = country, y = counts)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
country_plot
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel","ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
world
world$sovereignt
sample[sample == "UK"] <- "United Kingdom"
sample[sample == "UK"] <- "United States of America"
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
head(country_counts)
sample[sample == "UK"] <- "United Kingdom"
sample[sample == "US"] <- "United States of America"
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
head(country_counts)
ggplot(data = world) +
geom_sf(aes(fill = country_counts)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
sample[sample == "UK"] <- "United Kingdom"
sample[sample == "US"] <- "United States of America"
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
head(country_counts)
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in world$sovereignt) {
specific_row <- filter(country_counts, country == cntry)
country_dat[nrow(country_dat)+1,] <- c(cntry, specific_row$counts)
}
country_dat
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in world$sovereignt) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in world$sovereignt) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat <- country_dat[order(count, descending = F),]
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in world$sovereignt) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat <- country_dat[order(country_dat$count, descending = T),]
country_dat
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, descending = T),]
country_dat
country_dat <- country_dat[order(country_dat$count, descending = TRUE),]
country_dat <- country_dat[order(country_dat$count, descending = TRUE),]
country_dat
country_dat <- country_dat[order(country_dat$count),]
country_dat
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
country_dat
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in world$sovereignt) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
country_dat
world$sovereignt
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in unique(world$sovereignt)) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
country_dat
mapdata <- map_data("world")
mapdata <- map_data("world")
View(mapdata)
unique(mapdata$region)
sample[sample == "United Kingdom"] <- "UK"
sample[sample == "United States of America"] <- "USA"
sample[sample == "US"] <- "USA"
country_counts <- sample %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
head(country_counts)
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in unique(world$sovereignt)) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
country_dat
country_dat <- data.frame(country_name = as.character(),
count = as.numeric())
for (cntry in unique(mapdata$region)) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
country_dat
country_dat <- data.frame(region = as.character(),
count = as.numeric())
for (cntry in unique(mapdata$region)) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
country_dat
mapdata <- map_data("world")
mpadata <- left_join(mapdata, country_dat, by = "region")
mapdata <- map_data("world")
mapdata <- left_join(mapdata, country_dat, by = "region")
View(mapdata)
mapdata <- filter(mapdata, count != 0)
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count))
mapplot
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon() +
scale_fill_gradient(name = "count", trans = "log", breaks = c(5, 10, 20, 50, 100, 200, 300))
mapplot
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
scale_fill_gradient(name = "count", trans = "log", breaks = c(5, 10, 20, 50, 100, 200, 300))
mapplot
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = log(count)))
mapplot
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count))
mapplot
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log")
mapplot
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
mapplot
library(plotly)
plotly::ggplotly(mapplot)
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = count)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
plotly::ggplotly(mapplot)
mapdata <- map_data("world")
mapdata <- left_join(mapdata, country_dat, by = "region")
mapdata <- filter(mapdata, count != 0)
texts <- c()
for (i in 1:nrow(mapdata)) {
country_name <- mapdata[i,]$region
count <- mapdata[i,]$count
text = paste(paste(country_name, "Count:", sep = "\n"), count, sep = " ")
texts[length(texts)+1] <- text
}
mapdata$texts <- texts
mapdata <- map_data("world")
texts <- c()
for (i in 1:nrow(mapdata)) {
country_name <- mapdata[i,]$region
count <- mapdata[i,]$count
text = paste(paste(country_name, "Count:", sep = "\n"), count, sep = " ")
texts[length(texts)+1] <- text
}
country_dat$texts <- texts
View(mapdata)
mapdata <- map_data("world")
texts <- c()
for (i in 1:nrow(country_dat)) {
country_name <- country_dat[i,]$region
count <- country_dat[i,]$count
text = paste(paste(country_name, "Count:", sep = "\n"), count, sep = " ")
texts[length(texts)+1] <- text
}
country_dat$texts <- texts
mapdata <- left_join(mapdata, country_dat, by = "region")
mapdata <- filter(mapdata, count != 0)
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
plotly::ggplotly(mapplot)
mapdata <- map_data("world")
texts <- c()
for (i in 1:nrow(country_dat)) {
country_name <- country_dat[i,]$region
count <- country_dat[i,]$count
text = paste(paste(country_name, "Count:", sep = "\n"), count, sep = " ")
texts[length(texts)+1] <- text
}
country_dat$texts <- texts
mapdata <- left_join(mapdata, country_dat, by = "region")
# mapdata <- filter(mapdata, count != 0)
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
plotly::ggplotly(mapplot)
mapdata <- map_data("world")
texts <- c()
for (i in 1:nrow(country_dat)) {
country_name <- country_dat[i,]$region
count <- country_dat[i,]$count
text = paste(paste(country_name, "Count:", sep = "\n"), count, sep = " ")
texts[length(texts)+1] <- text
}
country_dat$texts <- texts
mapdata <- left_join(mapdata, country_dat, by = "region")
mapdata <- filter(mapdata, count != 0)
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
interactive <- plotly::ggplotly(mapplot)
for(i in 4:6){
interactive$x$data[[i]]$hoverinfo = 'none'
}
interactive
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
interactive <- plotly::ggplotly(mapplot)
for(i in 1:nrow(country_dat)){
interactive$x$data[[i]]$hoverinfo = 'none'
}
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "scale", trans = "log", breaks = c(1,10,50,250))
interactive <- plotly::ggplotly(mapplot)
for(i in 4:6){
interactive$x$data[[i]]$hoverinfo = 'none'
}
interactive
interactive$x$data
interactive$x$data[[1]]
interactive$x$data[[1]]$text
interactive$x$data[[2]]$text
length(interactive$x$data)
for (i in 1:length(interactive$x$data)) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[1]
print(text_post)
}
for (i in 1:length(interactive$x$data)) {
text_pre <- interactive$x$data[[i]]$text[[1]][1]
text_post <- strsplit(text_pre, "<")[1]
print(text_post)
}
for (i in 1:length(interactive$x$data)) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[1]
print(text_post)
}
interactive$x$data[[i]]$text
interactive$x$data[[1]]$text
interactive$x$data[[1]]$text[1]
strsplit(interactive$x$data[[1]]$text, "<")
strsplit(interactive$x$data[[1]]$text, "<")[[1]][1]
for (i in 1:length(interactive$x$data)) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
print(text_post)
}
for (i in 1:length(interactive$x$data)) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
interactive$x$data[[i]]$text <- text_post
}
View(interactive)
for (i in 1:length(interactive$x$data-1)) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
interactive$x$data[[i]]$text <- text_post
}
for (i in 1:length(interactive$x$data)-1) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
interactive$x$data[[i]]$text <- text_post
}
for (i in 1:length(interactive$x$data)-1) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
interactive$x$data[[i]]$hoverinfo <- text_post
}
interactive
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "sScale", trans = "log", breaks = c(1,10,50,250)) +
ggtitle("Release Count by Country")
interactive <- plotly::ggplotly(mapplot)
for (i in 1:length(interactive$x$data)-1) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
interactive$x$data[[i]]$text <- text_post
}
interactive
for (i in 1:length(interactive$x$data)) {
text_pre <- interactive$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
interactive$x$data[[i]]$text <- text_post
}
interactive
plot_countries(sample)
plot_countries <- function(dat) {
dat[dat == "United Kingdom"] <- "UK"
dat[dat == "United States of America"] <- "USA"
dat[dat == "US"] <- "USA"
country_counts <- dat %>%
group_by(country) %>%
summarise(counts = n())
country_counts <- country_counts[order(country_counts$counts, decreasing = TRUE),]
# head(country_counts)
country_dat <- data.frame(region = as.character(),
count = as.numeric())
for (cntry in unique(mapdata$region)) {
specific_row <- filter(country_counts, country == cntry)
if (nrow(specific_row) == 0) {
num <- 0
} else {
num <- specific_row$counts
}
country_dat[nrow(country_dat)+1,] <- c(cntry, num)
}
country_dat$count <- as.numeric(country_dat$count)
country_dat <- country_dat[order(country_dat$count, decreasing = T),]
mapdata <- map_data("world")
texts <- c()
for (i in 1:nrow(country_dat)) {
country_name <- country_dat[i,]$region
count <- country_dat[i,]$count
text = paste(paste(country_name, "Count:", sep = "\n"), count, sep = " ")
texts[length(texts)+1] <- text
}
country_dat$texts <- texts
mapdata <- left_join(mapdata, country_dat, by = "region")
mapdata <- filter(mapdata, count != 0)
mapplot <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = texts)) +
geom_polygon(aes(fill = count)) +
scale_fill_gradient(name = "sScale", trans = "log", breaks = c(1,10,50,250)) +
ggtitle("Release Count by Country")
interactive <- plotly::ggplotly(mapplot)
return(interactive)
}
plot_countries(sample)
plot_countries(raw_data)
map <- plot_countries(raw_data)
for (i in 1:length(map$x$data)) {
text_pre <- map$x$data[[i]]$text
text_post <- strsplit(text_pre, "<")[[1]][1]
map$x$data[[i]]$text <- text_post
}
map
